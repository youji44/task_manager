<?php namespace App\Http\Controllers\Main;

use App\Http\Controllers\Utils;
use App\Http\Controllers\WsController;
use App\Models\InternalAudit;
use App\Models\InternalAuditQuestions;
use Carbon\Carbon;
use Hamcrest\Util;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Intervention\Image\Facades\Image;
use Cartalyst\Sentinel\Laravel\Facades\Sentinel;
use Illuminate\Http\Request;

class AuditController extends WsController
{
    public function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub
    }

    private function iscomments($id){
        if($grade = DB::table('grading_result')->where('id',$id)->first()){
            if($grade->status == 1) return true;
        }
        return false;
    }

    /**
     * Audit Report
     */
    public function audit_index(Request $request)
    {
        try {
            $this->isAdmin = false;
            $this->user_id = Sentinel::getUser()->id;
            if(Sentinel::inRole('admin')||Sentinel::inRole('superadmin')||Sentinel::inRole('supervisor'))$this->isAdmin = true;

            DB::beginTransaction();

            $pid = Session::get('p_loc');
            $date = $request->get('date');

            $audit = DB::table('internal_audit as a')
                ->LeftJoin('fuel_equipment as fe','fe.id','=','a.unit')
                ->LeftJoin('settings_airline as air','air.id','=','a.airline')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->LeftJoin('operators as o','o.id','=','a.operator_id')
                ->LeftJoin('grading_result as gr','gr.id','=','a.overall_result')
                ->where('sa.plocation_id',$pid)
                ->where('a.status',0)
                ->orderby('a.date','DESC')
                ->orderby('a.time','DESC')
                ->orderby('sa.title','ASC')
                ->select('a.*',
                    'fe.unit as fe_unit',
                    Utils::unit_type(),
                    'air.logo','air.airline_name',
                    'air.airline_name',
                    'sa.title',
                    'o.operator',
                    'gr.result as gr_result',
                    'gr.color as gr_color'
                )
                ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->when($date != '', function ($q) use ($date){
                    $q->whereDate('a.date',$date);
                })
                ->get();

            $pending_data = DB::table('internal_audit as a')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->where('sa.plocation_id',$pid)
                ->where('a.status',0)
                ->select('a.date')
                ->groupby('a.date')
                ->orderby('a.date','desc')
                ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->get();

            $pending = array();
            if($date!='') $pending[] = $date;
            foreach ($pending_data as $item){
                $d = date('Y-m-d',strtotime($item->date));
                if($item->date != null && !in_array($d,$pending))
                    $pending[] = $d;
            };

            $total = DB::table('internal_audit as a')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->where('sa.plocation_id',$pid)
                ->whereDate('a.date',$date?$date:date('Y-m-d'))
                ->where('a.status','<',2)
                ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->count();

            /**
             * Reports part
             */
            $date_report = $request->get('date2',date('Y-m-d'));
            $month = $request->get('month',date('M Y'));
            $year = $request->get('year',date('Y'));
            $location = $request->get('pl','all');
            $period = $request->get('period','1');
            $auditor = $request->get('au','all');
            $operator = $request->get('op','all');
            $audit_type = $request->get('type','all');
            $unit = $request->get('unit','all');
            $airline = $request->get('airline','all');

            $s_date = $request->get('s_date', date('Y-m-d', strtotime(' -1 day',strtotime(date('Y-m-d')))));
            $e_date = $request->get('e_date', date('Y-m-d'));

            $fuel_equipment = DB::table('fuel_equipment')
                ->where('status','<',2)
                ->select('id','unit', Utils::unit_type())
                ->orderBy('unit','ASC');

            $fuel_equipment = $fuel_equipment->where('plocation_id',$pid);
            $fuel_equipment = $fuel_equipment->get();

            $settings_airline = DB::table('settings_airline')
                ->orderby('airline_name','ASC')
                ->where('status','<',2)
                ->select('id','airline_name','logo')
                ->get();

            $auditors = DB::table('users as u')
                ->leftjoin('role_users as ru', 'ru.user_id', '=', 'u.id')
                ->leftjoin('roles as r', 'r.id', '=', 'ru.role_id')
                ->leftjoin('activations as a', 'a.user_id', '=', 'u.id')
                ->where('a.completed',1)
                ->where('r.slug','!=','readonly')
                ->where('r.slug','!=','maintenance')
                ->where('r.slug','!=','staff')
                ->select('u.id','u.name')
                ->orderby('u.name','ASC')
                ->get();

            $operators = DB::table('operators')
                ->where('status','<',2)
                ->select('id','operator')
                ->get();

            $primary_location = DB::table('primary_location')
                ->where('status','<',2)
                ->select('id','location')
                ->get();

            $settings_audit = DB::table('settings_audit')
                ->where('status','<',2)
                ->where('plocation_id','=',$pid)
                ->orderBy('title','ASC')
                ->get();

            $audit_report = DB::table('internal_audit as a')
                ->LeftJoin('fuel_equipment as fe','fe.id','=','a.unit')
                ->LeftJoin('settings_airline as air','air.id','=','a.airline')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->LeftJoin('operators as o','o.id','=','a.operator_id')
                ->LeftJoin('grading_result as gr','gr.id','=','a.overall_result')
                ->LeftJoin('users as u','u.id','=','a.user_id')
                ->where('a.status',1)
                ->orderby('sa.title','ASC')
                ->orderBy('a.date','desc')
                ->orderBy('a.time','desc')
                ->when($unit != 'all', function ($q) use ($unit){
                    $q->where('a.unit',$unit);
                })
                ->when($airline != 'all', function ($q) use ($airline){
                    $q->where('a.airline',$airline);
                })
                ->when($auditor != 'all', function ($q) use ($auditor){
                    $q->where('a.user_id',$auditor);
                })
                ->when($operator != 'all', function ($q) use ($operator){
                    $q->where('a.operator_id',$operator);
                })
                ->when($period == '', function ($q) use ($date_report){
                    $q->whereDate('a.date',$date_report);
                })
                ->when($period == '0', function ($q){
                    $date2 = date('Y-m-d');
                    $q->whereDate('a.date',$date2);
                })
                ->when($period == '1', function ($q){
                    $date2 = date('Y-m-d', strtotime(' -1 day',strtotime(date('Y-m-d'))));
                    $q->whereDate('a.date', $date2);
                })
                ->when($period == '7', function ($q){
                    $date2 = date('Y-m-d', strtotime(' -7 day',strtotime(date('Y-m-d'))));
                    $q->whereDate('a.date','>=', $date2);
                })
                ->when($period == '15', function ($q) {
                    $date2 = date('Y-m-d', strtotime(' -15 day',strtotime(date('Y-m-d'))));
                    $q->whereDate('a.date','>=', $date2);
                })
                ->when($period == '30', function ($q) {
                    $date2 = date('Y-m-d', strtotime(' -30 day',strtotime(date('Y-m-d'))));
                    $q->whereDate('a.date','>=', $date2);
                })
                ->when($period == 'm', function ($q) use ($month){
                    $q->whereYear('a.date', date('Y', strtotime($month)))
                        ->whereMonth('a.date', date('m', strtotime($month)));
                })
                ->when($period == 'r', function ($q) use ($s_date, $e_date){
                    $q->whereDate('a.date','>=', $s_date)
                        ->whereDate('a.date','<=', $e_date);
                })
                ->select('a.*','sa.title',
                    'fe.unit as fe_unit',
                    Utils::unit_type(),
                    'air.logo',
                    'air.airline_name',
                    'o.operator',
                    'gr.result as gr_result','gr.color as gr_color')
                 ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->get();

            $not_audit = DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit as sa','sa.id','=','iq.audit_type')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('internal_audit as a','a.id','=','iq.internal_audit')
                ->leftJoin('fuel_equipment as fe','fe.id','=','a.unit')
                ->leftJoin('settings_airline as air','air.id','=','a.airline')
                ->leftJoin('operators as o','o.id','=','a.operator_id')
                ->LeftJoin('users as u','u.id','=','a.user_id')
                ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                ->where('a.status',1)
                ->where('gr.value','auditor_2')
                ->whereYear('a.date',date('Y',strtotime($month)))
                ->whereMonth('a.date',date('m',strtotime($month)))
                ->orderBy('a.date','desc')
                ->orderBy('a.time','desc')
                ->orderBy('sq.question','asc')
                ->select('a.id','iq.comment','iq.files','a.date','a.time','a.ck_name','a.checked_at','a.user_name','a.status','fe.unit','air.logo','air.airline_name','a.operator_name',
                    'sa.title','sq.question','u.name','o.operator','gr.result as gr_result','gr.color as gr_color')
                 ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->when($audit_type != 'all', function ($q) use ($audit_type){
                    $q->where('sa.id',$audit_type);
                })
                ->where('sa.plocation_id',$pid)
                ->get();

            $period2 = $request->get('period2',"0");
            $month2 = $request->get('month2',date("M Y"));

            $stats_total =  DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit as sa','sa.id','=','iq.audit_type')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('internal_audit as a','a.id','=','iq.internal_audit')
                ->where('a.status',1)
                ->whereYear('a.date',$year)
                ->groupBy('sq.id','sq.question')
                ->select('sq.id', DB::raw('count(sq.question) as total'))
                ->when($period2 == "0", function ($q) use ($year){
                    $q->whereYear('a.date',$year);
                })
                ->when($period2 == "1", function ($q) use ($month2){
                    $q->whereYear('a.date', date('Y', strtotime($month2)))
                        ->whereMonth('a.date', date('m', strtotime($month2)));
                })
                ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->when($period2 == "0", function ($q) use ($year){
                    $q->whereYear('a.date',$year);
                })
                ->when($period2 == "1", function ($q) use ($month2){
                    $q->whereYear('a.date', date('Y', strtotime($month2)))
                        ->whereMonth('a.date', date('m', strtotime($month2)));
                })
                ->where('sa.plocation_id',$pid)
                ->get();

            $stats_audit =  DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit as sa','sa.id','=','iq.audit_type')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('internal_audit as a','a.id','=','iq.internal_audit')
                ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                ->where('a.status',1)
                ->where('gr.value','auditor_2')
                ->whereYear('a.date',$year)
                ->orderby('sq.question','ASC')
                ->groupBy('sq.id','sq.question')
                ->select('sq.id','sq.question',DB::raw('count(sq.question) as total'))
                ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->where('sa.plocation_id',$pid)
                ->get();

            $audit_task = [];
            $percents = [];
            $pie_colors = [];
            $colors = ["darkred","#1E90FF","lightblue", "dodgerblue", "#FFD700","firebrick","#FF5733","crimson","#4169E1","skyblue","#FF6347","indianred","#FFDB58","deepskyblue"];
            $i = 0;
            foreach ($stats_audit as $item){
                $item->percent = 0;
                $item->details = Array();
                foreach ($stats_total as $item1){
                    if($item->id == $item1->id) {
                        $item->percent = $item1->total!=0?round($item->total * 100 / $item1->total, 2):0;
                        $item->details =  DB::table('internal_audit_questions as iq')
                            ->leftJoin('settings_audit as sa','sa.id','=','iq.audit_type')
                            ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                            ->leftJoin('internal_audit as a','a.id','=','iq.internal_audit')
                            ->leftJoin('operators as o','o.id','=','a.operator_id')
                            ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                            ->where('a.status',1)
                            ->where('gr.value','auditor_2')
                            ->where('sq.id','=',$item->id)
                            ->where('sa.plocation_id',$pid)
                            ->whereYear('a.date',$year)
                            ->orderby('o.operator','asc')
                            ->groupBy('o.operator','a.operator_name')
                            ->select('o.operator','a.operator_name', DB::raw('(count(o.operator) + count(a.operator_name)) as total'))
                            ->get();
                    }
                }
                $audit_task[] = $item->question;
                $percents[] = $item->total;
                $pie_colors[] = $colors[$i];
                $i++;
                if($i >= count($colors))$i = 0;
            }

            $reports = DB::table('internal_audit as a')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->where('sa.plocation_id',$pid)
                ->where('a.status',1)
                ->select('a.date')
                ->groupby('a.date')
                ->orderby('a.date','desc')
                 ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                ->get();

            $report_date = array();
            if($date!='') $report_date[] = $date;
            else $report_date[] = date('Y-m-d');
            foreach ($reports as $item){
                $d = date('Y-m-d',strtotime($item->date));
                if($item->date != null && !in_array($d,$report_date))
                    $report_date[] = $d;
            };

            $days = Carbon::now()->month(date('m',strtotime($month)))->daysInMonth;
            $daily = [];
            $depths = DB::table('settings_audit')
                ->where('status','<',2)
                ->where('plocation_id',$pid)
                ->orderBy('title')
                ->select('id','title')
                ->get();
            $daily_count = [];
            $record_data = [];
            for ($day = 1; $day <= $days; $day++){
                $daily[] = $day;
            }
            for ($day = 0; $day <= $days; $day++){
                $total_count = 0;
                $total_audit = [];
                foreach ($depths as $key => $value) {
                    if ($day == 0) {
                        $total_audit[] = strtoupper($value->title);
                    } else {
                        $record = null;
                        $record = DB::table('internal_audit as a')
                            ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                            ->where('sa.plocation_id',$pid)
                            ->where('a.status',1)
                            ->where('a.audit_type',$value->id)
                            ->whereDate('a.date',date('Y-m-d',strtotime($day.' '.$month)))
                            ->select(
                                DB::raw('count(a.id) as total')
                            )->first();
                        $total_count += $record->total;
                        $record = $record?$record->total:'';
                        if(date('Y-m',strtotime($month)) == date('Y-m') && $day > date('j')) $record = " ";
                        if(date('Y-m',strtotime($month)) > date('Y-m')) $record = " ";
                        $total_audit[] = $record;
                    }
                }
                $record_data[] = $total_audit;
                if($day > 0) $daily_count[] = $total_count;
            }

            DB::commit();

            return view('audit.index',compact('audit','total','date','pending',
                'audit_report','auditors','settings_audit','audit_type','operators','operator','date_report','report_date',
                'period','auditor','month','year','not_audit','stats_audit','fuel_equipment','settings_airline','unit','airline','audit_task','percents'
                ,'pie_colors','daily','depths','daily_count','record_data','period2','month2','s_date','e_date'
            ));
        }catch(\Exception $e){
            DB::rollBack();
            Log::info($e->getMessage());
            return back()->with('error', "Failed!");
        }
    }

    public function audit_check(Request $request){

        try {
            $user_id = '';
            $user_name = '';
            if(Sentinel::check()) {
                $user_id = Sentinel::getUser()->id;
                $user_name = Sentinel::getUser()->name;
            }

            DB::beginTransaction();
            $pid = Session::get('p_loc');
            $id = $request->get('id');
            $date = $request->get('date');
            $checked = $request->get('checked');
            $selected_id = $checked?explode(',',$checked):[];

            if($id){
                if($request->get('undo') == 'undo'){
                    DB::table('internal_audit')->where('id',$id)
                        ->update(['status' => 0,'ck_uid'=>null,'ck_name'=>null,'checked_at'=>null]);
                    DB::commit();
                    return response()->json(['result'=>'undo']);
                }
                DB::table('internal_audit as ts')
                    ->where('ts.id',$id)
                    ->update(['ts.status' => 1,'ts.ck_uid'=>$user_id,'ts.ck_name'=>$user_name,'ts.checked_at'=>Date('Y-m-d H:i:s')]);
            }else if(count($selected_id) > 0){
                foreach ($selected_id as $sid){
                    DB::table('internal_audit as ts')
                        ->where('ts.id',$sid)
                        ->update(['ts.status' => 1,'ts.ck_uid'=>$user_id,'ts.ck_name'=>$user_name,'ts.checked_at'=>Date('Y-m-d H:i:s')]);
                }
            }else{
                DB::table('internal_audit as a')
                    ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                    ->where('sa.plocation_id',$pid)
                    ->where('a.status',0)
                    ->when($date, function ($query) use ($date){
                        $query->whereDate('a.date',$date);
                    })
                    ->where(function($query) use ($pid) {$query->whereNull('a.pid')->orWhere('a.pid', $pid);})
                    ->update(['a.status' => 1,'a.ck_uid'=>$user_id,'a.ck_name'=>$user_name,'a.checked_at'=>Date('Y-m-d H:i:s')]);
            }
            DB::commit();

            return Redirect::route('audit')->with('success','Checked successfully');
        }catch(\Exception $e){
            Log::info($e->getMessage());
            DB::rollBack();
            return back()->with('error', "Loading Failed!");
        }
    }

    public function audit_add(Request $request)
    {
        $date = $request->get('date');
        $pid = Session::get('p_loc');

        $fuel_equipment = DB::table('fuel_equipment')
            ->where('plocation_id',$pid)
            ->where('status','<',2)
            ->select('id','unit',Utils::unit_type())
            ->orderBy('unit','ASC')
            ->get();

        $settings_airline = DB::table('settings_airline')
            ->orderby('airline_name','ASC')
            ->where('status','<',2)
            ->select('id','airline_name','logo')
            ->get();

        $settings_refuelled = DB::table('settings_refuelled')
            ->orderby('refuelled','ASC')
            ->where('status','<',2)
            ->where('plocation_id',$pid)
            ->select('id','refuelled')
            ->get();

        $operators = DB::table('operators')
            ->where('status','<',2)
            ->select('id','operator')
            ->orderBy('operator','asc')
            ->get();

        $audits = DB::table('settings_audit')
            ->where('status','<',2)
            ->where('plocation_id',$pid)
            ->orderBy('title','ASC')
            ->get();

        $grading_condition  = DB::table('grading_result')
            ->where('grading_type','condition')
            ->where('status','<',2)
            ->get();

        $grading_audit  = DB::table('grading_result')
            ->where('grading_type','auditor')
            ->where('status','<',2)
            ->get();

        foreach ($fuel_equipment as $item){
            if(!$rec = DB::table('internal_audit as a')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->where('sa.plocation_id',$pid)
                ->where('a.unit', $item->id)
                ->where('a.status','<',2)
                ->orderBy('a.date','desc')
                ->orderBy('a.time','desc')->first())
            {
                $last_inspected = date('Y-m-d');
            }
            else
            {
                $last_inspected = $rec->date;
            }
            $item->last_inspected = $last_inspected;
        }

        if(count($fuel_equipment) < 1)
            return back()->with('warning', "Sorry you have no any inspection items. if you think this is an error, please contact administrator");

        return view('audit.add',compact('operators','audits','date','grading_condition','grading_audit','fuel_equipment','settings_airline','settings_refuelled'));
    }

    public function audit_change(Request $request)
    {
        $audit_type = $request->get('id');
        $audit_questions = DB::table('settings_audit_questions')
            ->where('audit_id','=',$audit_type)
//            ->orderBy('question','ASC')
            ->get();

        $grading_audit  = DB::table('grading_result')
            ->where('grading_type','auditor')
            ->where('status','<',2)
            ->get();

        return view('audit.topic',compact('audit_questions','grading_audit'));
    }

    public function audit_edit($id, Request $request)
    {
        try {
            DB::beginTransaction();
            if(!$audit = DB::table('internal_audit')->where('id',$id)->where('status',0)->first()){
                return back()->with('error', "Loading Failed!");
            }
            $pid = Session::get('p_loc');

            $fuel_equipment = DB::table('fuel_equipment')
                ->where('plocation_id',$pid)
                ->where('status','<',2)
                ->select('id','unit', Utils::unit_type())
                ->orderBy('unit','ASC')
                ->get();

            $settings_airline = DB::table('settings_airline')
                ->orderby('airline_name','ASC')
                ->where('status','<',2)
                ->select('id','airline_name','logo')
                ->get();

            $settings_refuelled = DB::table('settings_refuelled')
                ->orderby('refuelled','ASC')
                ->where('status','<',2)
                ->where('plocation_id',$pid)
                ->select('id','refuelled')
                ->get();

            $audits = DB::table('settings_audit')
                ->where('status','<',2)
                ->where('plocation_id','=',$pid)
                ->orderBy('title','ASC')
                ->get();

            $operators = DB::table('operators')
                ->where('status','<',2)
                ->select('id','operator')
                ->orderBy('operator','asc')
                ->get();

            $grading_condition  = DB::table('grading_result')
                ->where('grading_type','condition')
                ->where('status','<',2)
                ->select('id','result','color')
                ->get();

            $grading_audit  = DB::table('grading_result')
                ->where('grading_type','auditor')
                ->where('status','<',2)
                ->get();

            $audit_type = $audit->audit_type;
            $audit_questions = DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('settings_audit as sa','sa.id','=','sq.audit_id')
                ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                ->where('sa.plocation_id','=',$pid)
                ->where('iq.internal_audit','=',$id)
                ->where('iq.audit_type','=',$audit_type)
                ->select('iq.files','iq.comment',
                    'gr.id as gr_id','gr.result as gr_result','gr.color as gr_color',
                    'sq.question','sq.id')
                ->orderBy('sq.id')
                ->get();

            foreach ($fuel_equipment as $item){
                if(!$rec = DB::table('internal_audit as a')
                    ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                    ->where('sa.plocation_id',$pid)
                    ->where('a.unit', $item->id)
                    ->where('a.status','<',2)
                    ->orderBy('a.date','desc')
                    ->orderBy('a.time','desc')->first())
                {
                    $last_inspected = date('Y-m-d');
                }
                else
                {
                    $last_inspected = $rec->date;
                }
                $item->last_inspected = $last_inspected;
            }

            if(count($fuel_equipment) < 1)
                return back()->with('warning', "Sorry you have no any inspection items. if you think this is an error, please contact administrator");

            DB::commit();

            return view('audit.edit',compact('audit','audit_questions','audits','operators','grading_condition','grading_audit','settings_airline','fuel_equipment','settings_refuelled'));
        }catch(\Exception $e){
            DB::rollBack();
            Log::info($e->getMessage());
            return back()->with('error', "Failed!");
        }
    }

    public function audit_save(Request $request)
    {
        $user_id = '';
        $user_name = '';
        if(Sentinel::check()) {
            $user_id = Sentinel::getUser()->id;
            $user_name = Sentinel::getUser()->name;
        }

        $pid = Session::get('p_loc');

        $date = $request->get('date');
        $time = $request->get('time');
        $unit = $request->get('unit');
        $airline = $request->get('airline');
        $operator = $request->get('operator');
        $audit_type = $request->get('audit_type');
        $overall_result = $request->get('overall_result');
        $comments = $request->get('comments');
        $refuelled_id = $request->get('refuelled');
        $flight_number = $request->get('flight_number');
        $location_gate = $request->get('location_gate');
        $signature = $request->get('signature');

        try {
            DB::beginTransaction();

            $db = new InternalAudit();
            $db->user_id = $user_id;
            $db->user_name = $user_name;
            $db->date = $date;
            $db->time = $time;
            $db->pid = $pid;
            $db->unit = $unit;
            $db->airline = $airline;
            $db->operator_name = $operator;
//            $db->operator_id = $operator;
            $db->audit_type = $audit_type;
            $db->overall_result = $overall_result;
            $db->comments = $comments;

            $db->refuelled_id = $refuelled_id;
            $db->flight_number = $flight_number;
            $db->location_gate = $location_gate;
            $db->signature = $signature;

            $db->geo_latitude = Session::get('geo_lat');
            $db->geo_longitude = Session::get('geo_lng');
            /**
             * File uploads code
             * Begin
             */
            $images = null;
            if(count($request->get('images',[])) > 0) $images = json_encode($request->get('images',[]));
            /**
             * End
             */
            $db->images = $images;
            if(Sentinel::inRole('autovalidate')) {
                $db->status = 1;
                $db->ck_uid = $user_id;
                $db->ck_name = $user_name;
                $db->checked_at = date('Y-m-d');
            }
            $db->save();

            $audit_questions = DB::table('settings_audit_questions')
                ->where('audit_id','=',$audit_type)
                ->orderBy('question','ASC')
                ->select('id','question')
                ->get();

            foreach ($audit_questions as $item){
                $db1 = new InternalAuditQuestions();

                $db1->internal_audit = $db->id;
                $db1->audit_type = $audit_type;
                $db1->topic_id = $item->id;
                $db1->result = $request->get('condition_'.$item->id);
                $db1->comment = $request->get('comment_'.$item->id);
                $files = null;
                if(count($request->get('files_'.$item->id,[])) > 0){
                    $files = json_encode($request->get('files_'.$item->id,[]));
                }
                $db1->files = $files;
                $db1->save();
            }

            DB::commit();
            return Redirect::route('audit')->with('success', "Successful Added!");
        }catch(\Exception $e){
            DB::rollBack();
            Log::info($e->getMessage());
            return Redirect::route('audit')->with('error', "Failed Adding");
        }
    }

    public function audit_update(Request $request)
    {
        $id = $request->get('id');
        $user_id = '';
        $user_name = '';
        if(Sentinel::check()) {
            $user_id = Sentinel::getUser()->id;
            $user_name = Sentinel::getUser()->name;
        }

        $pid = Session::get('p_loc');
        $date = $request->get('date');
        $time = $request->get('time');
        $unit = $request->get('unit');
        $airline = $request->get('airline');

        $operator = $request->get('operator');
        $audit_type = $request->get('audit_type');
        $overall_result = $request->get('overall_result');

        $comments = $request->get('comments');

        $refuelled_id = $request->get('refuelled');
        $flight_number = $request->get('flight_number');
        $location_gate = $request->get('location_gate');
        $signature = $request->get('signature');


        try {
            DB::beginTransaction();

            /**
             * File uploads code
             * Begin
             */
            $images = null;
            if(count($request->get('images',[])) > 0){
                $images = $request->get('images',[]);
                if(count($images) > 8){
                    return Redirect::back()->with('warning', "The images for uploading should be less than 4");
                }
                $images = json_encode($images);
            }

            /**
             * End
             */
            $editor = '<p>Edited by '.$user_name.' on '.date('Y-m-d').' at '.date('H:i').'</p>';
            //$comments = $comments.$editor;

            DB::table('internal_audit')->where('id',$id)->update([

                //'user_id' => $user_id,
                //'user_name' => $user_name,
                'date' => $date,
                'time' => $time,
                'pid' => $pid,
                'unit' => $unit,
                'airline' => $airline,
                'operator_name' => $operator,
//                'operator_id' => $operator,
                'audit_type' => $audit_type,
                'overall_result' => $overall_result,
                'comments' => $comments,
                'images' => $images,
                'refuelled_id' => $refuelled_id,
                'flight_number' => $flight_number,
                'location_gate' => $location_gate,
                'signature' => $signature,
                'updated_at'=> date('Y-m-d H:i:s'),
                'geo_latitude' => Session::get('geo_lat'),
                'geo_longitude' => Session::get('geo_lng')
            ]);

            $audit_questions = DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('settings_audit as sa','sa.id','=','sq.audit_id')
                ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                ->where('sa.plocation_id','=',Session::get('p_loc'))
                ->where('iq.internal_audit','=',$id)
                ->where('iq.audit_type','=',$audit_type)
                ->select('iq.files','iq.comment',
                    'gr.id as gr_id','gr.result as gr_result','gr.color as gr_color',
                    'sq.question','sq.id')
                ->orderBy('sq.question','ASC')
                ->get();

            foreach ($audit_questions as $item){

                $files = null;
                if(count($request->get('files_'.$item->id,[])) > 0){
                    $images = $request->get('files_'.$item->id,[]);
                    if(count($images) > 8)
                    {
                        return Redirect::back()->with('warning', "The images for uploading should be less than 4");
                    }
                    $files = json_encode($images);
                }

                DB::table('internal_audit_questions')
                    ->where('internal_audit',$id)
                    ->where('audit_type',$audit_type)
                    ->where('topic_id',$item->id)
                    ->update
                    ([
                        'result'=>$request->get('condition_'.$item->id),
                        'comment'=>$request->get('comment_'.$item->id),
                        'files'=>$files,
                    ]);
            }

            DB::commit();
            return Redirect::route('audit')->with('success', "Successful Updated!");

        }catch(\Exception $e){
            DB::rollBack();
            Log::info($e->getMessage());
            return Redirect::route('audit')->with('error', "Failed Updating");
        }
    }

    public function audit_delete(Request $request)
    {
        $id = $request->get('id');
        if(DB::table('internal_audit')->where('id',$id)->update(['status'=>2]))
            return;// Redirect::route('audit')->with('success', 'Successful Deleted!');
        else
            return;// Redirect::route('audit')->with('error', 'Failed Deleting!');
    }

    public function audit_upload(Request $request){
        try{
            $images_audit = null;
            if($file_temp = $request->file('file')){
                $destinationPath = public_path() . '/uploads/audit';
                $extension   = $file_temp->getClientOriginalExtension()?: 'png';
                $images_audit =  Str::random(10).'.'.$extension;

                $img = Image::make($file_temp->getRealPath());
                // Check and correct image orientation
                $img->orientate();
                // Resize and save the image
                if ($img->width() > 1024 || $img->height() > 1024) {
                    $img->resize(1024, 1024, function ($constraint) {
                        $constraint->aspectRatio();
                    });
                }
                $img->save($destinationPath.'/'.$images_audit);
            }

        }catch (\Exception $e){
            Log::info($e->getMessage());
        }

        return response()->json([
            'name'=> $images_audit
        ]);
    }

    public function audit_detail($id, Request $request)
    {
        try {
            DB::beginTransaction();

            if(!$audit =DB::table('internal_audit as a')
                ->LeftJoin('fuel_equipment as fe','fe.id','=','a.unit')
                ->LeftJoin('settings_airline as air','air.id','=','a.airline')
                ->LeftJoin('settings_refuelled as re','re.id','=','a.refuelled_id')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->LeftJoin('operators as o','o.id','=','a.operator_id')
                ->LeftJoin('grading_result as gr','gr.id','=','a.overall_result')
                ->where('a.id',$id)
                ->select('a.*','sa.title',
                    'fe.unit as fe_unit',
                    Utils::unit_type(),
                    'air.logo','air.airline_name',
                    're.refuelled',
                    'o.operator as o_operator',
                    'gr.result as gr_result',
                    'gr.color as gr_color')
                ->first()){
                return '<h6 class="text-danger">There is no detailed inspection.</h6>';
            }

            $audit_type = $audit->audit_type;
            $audit_questions = DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('settings_audit as sa','sa.id','=','sq.audit_id')
                ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                ->where('sa.plocation_id','=',Session::get('p_loc'))
                ->where('iq.internal_audit','=',$id)
                ->where('iq.audit_type','=',$audit_type)
                ->select('iq.files','iq.comment',
                    'gr.id as gr_id','gr.result as gr_result','gr.color as gr_color',
                    'sq.question','sq.id')
                ->orderBy('sq.id','ASC')
                ->get();

            DB::commit();

            return view('audit.detail',compact('audit','audit_questions'));
        }catch(\Exception $e){
            DB::rollBack();
            Log::info($e->getMessage());
            return '<h6 class="text-danger">There is an issue for displaying.</h6>';
        }
    }

    public function audit_print($id, Request $request)
    {
        try {
            DB::beginTransaction();

            if(!$audit =DB::table('internal_audit as a')
                ->LeftJoin('fuel_equipment as fe','fe.id','=','a.unit')
                ->LeftJoin('settings_airline as air','air.id','=','a.airline')
                ->LeftJoin('settings_refuelled as re','re.id','=','a.refuelled_id')
                ->LeftJoin('settings_audit as sa','sa.id','=','a.audit_type')
                ->LeftJoin('operators as o','o.id','=','a.operator_id')
                ->LeftJoin('grading_result as gr','gr.id','=','a.overall_result')
                ->where('sa.plocation_id',Session::get('p_loc'))
                ->where('a.id',$id)
                ->select('a.*','sa.title',
                    'fe.unit as fe_unit',
                     Utils::unit_type(),
                    'air.logo','air.airline_name',
                    're.refuelled',
                    'o.operator as o_operator',
                    'gr.result as gr_result',
                    'gr.value as gr_value',
                    'gr.color as gr_color')
                ->first()){
                return back()->with('error', "Loading Failed!");
            }

            $audit->logo = Utils::convert_base64(public_path().'/uploads/settings/'.$audit->logo);

            $images = [];
            if($audit->images && json_decode($audit->images)){
                foreach (json_decode($audit->images) as $img){
                    $images[] = Utils::convert_base64(public_path().'/uploads/'.$img);
                }
            }
            $audit->images = $images;

            $audit_type = $audit->audit_type;
            $audit_questions = DB::table('internal_audit_questions as iq')
                ->leftJoin('settings_audit_questions as sq','sq.id','=','iq.topic_id')
                ->leftJoin('settings_audit as sa','sa.id','=','sq.audit_id')
                ->leftJoin('grading_result as gr','gr.id','=','iq.result')
                ->where('sa.plocation_id','=',Session::get('p_loc'))
                ->where('iq.internal_audit','=',$id)
                ->where('iq.audit_type','=',$audit_type)
                ->select('iq.files','iq.comment',
                    'gr.id as gr_id','gr.result as gr_result','gr.color as gr_color',
                    'sq.question','sq.id')
                ->orderBy('sq.id','ASC')
                ->get();

            $no = 1;
            $questions = [];
            foreach ($audit_questions as $item){
                $table_body = $no++ . '.';
                $table_body .= strtoupper($item->question).'<b>';
                $questions[] = $table_body;
                $questions[] = 'Result: '.strtoupper($item->gr_result);
                $table_body = 'Comment: ';
                $table_body .= $item->comment?$item->comment:'-';
                $questions[] = $table_body;
                if($item->files && json_decode($item->files)){
                    foreach (json_decode($item->files) as $img){
                        $questions[] = 'files-'.Utils::convert_base64(public_path().'/uploads/audit/'.$img);
                    }
                }
                $questions[] = 'line-'.Utils::convert_base64(public_path().'/img/line.png');
            }
            $audit->satisfied = Utils::convert_base64(public_path().'/img/t.png');
            $audit->notsatisfied = Utils::convert_base64(public_path().'/img/f.png');
            $audit->na = Utils::convert_base64(public_path().'/img/n.png');

            DB::commit();
            return view('audit.print',compact('audit','questions'));
        }catch(\Exception $e){
            DB::rollBack();
            Log::info($e->getMessage());
            return back()->with('error', "Failed!");
        }
    }

    public function getDownload(Request $request)
    {
        try{
            $filename = $request->get('file');
            $file= public_path(). "/uploads/audit/".$filename;
            return Response::download($file, $filename);
        }catch (\Exception $e){
            return null;
        }
    }

}
